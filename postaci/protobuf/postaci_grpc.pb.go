// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: protocols/postaci.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailingServerClient is the client API for MailingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingServerClient interface {
	ForwardMail(ctx context.Context, in *ForwardMailRequest, opts ...grpc.CallOption) (*ForwardMailResponse, error)
}

type mailingServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingServerClient(cc grpc.ClientConnInterface) MailingServerClient {
	return &mailingServerClient{cc}
}

func (c *mailingServerClient) ForwardMail(ctx context.Context, in *ForwardMailRequest, opts ...grpc.CallOption) (*ForwardMailResponse, error) {
	out := new(ForwardMailResponse)
	err := c.cc.Invoke(ctx, "/MailingServer/ForwardMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingServerServer is the server API for MailingServer service.
// All implementations must embed UnimplementedMailingServerServer
// for forward compatibility
type MailingServerServer interface {
	ForwardMail(context.Context, *ForwardMailRequest) (*ForwardMailResponse, error)
	mustEmbedUnimplementedMailingServerServer()
}

// UnimplementedMailingServerServer must be embedded to have forward compatible implementations.
type UnimplementedMailingServerServer struct {
}

func (UnimplementedMailingServerServer) ForwardMail(context.Context, *ForwardMailRequest) (*ForwardMailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMail not implemented")
}
func (UnimplementedMailingServerServer) mustEmbedUnimplementedMailingServerServer() {}

// UnsafeMailingServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailingServerServer will
// result in compilation errors.
type UnsafeMailingServerServer interface {
	mustEmbedUnimplementedMailingServerServer()
}

func RegisterMailingServerServer(s grpc.ServiceRegistrar, srv MailingServerServer) {
	s.RegisterService(&MailingServer_ServiceDesc, srv)
}

func _MailingServer_ForwardMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServerServer).ForwardMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MailingServer/ForwardMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServerServer).ForwardMail(ctx, req.(*ForwardMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailingServer_ServiceDesc is the grpc.ServiceDesc for MailingServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailingServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MailingServer",
	HandlerType: (*MailingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardMail",
			Handler:    _MailingServer_ForwardMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocols/postaci.proto",
}
